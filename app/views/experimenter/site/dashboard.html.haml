- content_for :title do
  Traveler

- content_for :head do
  = stylesheet_link_tag 'experimenter'
  %link(href="/javascripts/openlayers/theme/default/google.css" rel="stylesheet" type="text/css")
  %script(src = "http://maps.google.com/maps/api/js?sensor=false")
  
- content_for :content do
  :javascript
    var map;
    var previousMapCenter;
    var travelFixSelectControl;
    
    $(document).ready(function() {
      // BASE MAP
      map = new OpenLayers.Map('map');
      map.addControl(new OpenLayers.Control.LayerSwitcher());
      
      var gphy = new OpenLayers.Layer.Google(
          "Google Physical",
          {type: google.maps.MapTypeId.TERRAIN}
      );
      var gmap = new OpenLayers.Layer.Google(
          "Google Streets", // the default
          {numZoomLevels: 20}
      );
      var ghyb = new OpenLayers.Layer.Google(
          "Google Hybrid",
          {type: google.maps.MapTypeId.HYBRID, numZoomLevels: 20}
      );
      var gsat = new OpenLayers.Layer.Google(
          "Google Satellite",
          {type: google.maps.MapTypeId.SATELLITE, numZoomLevels: 22}
      );
      map.addLayers([gphy, gmap, ghyb, gsat]);
      // TRAVEL FIXES
      var travelFixStyleMap = new OpenLayers.StyleMap({
          "default": new OpenLayers.Style({
              pointRadius: 5,
              fillColor: "#66ccff",
              strokeColor: "#3399ff",
              strokeWidth: 2,
              graphicZIndex: 1
          }),
          "select": new OpenLayers.Style({
              fillColor: "#ffcc66",
              strokeColor: "#ff9933",
              graphicZIndex: 2
          })
      });
      var travelFixLayer = new OpenLayers.Layer.Vector("Travel Fixes", {styleMap: travelFixStyleMap});
      map.addLayer(travelFixLayer);
      travelFixSelectControl = new OpenLayers.Control.SelectFeature(travelFixLayer, {
        hover: true,
        eventListeners: {
          featurehighlighted: function(event) {
            $('input#travel-fix-' + event.feature.attributes.travelFixId).parent().removeClass('selected').addClass('highlighted');
          },
          featureunhighlighted: function(event) {
            $('input#travel-fix-' + event.feature.attributes.travelFixId).parent().removeClass('highlighted').addClass('selected');            
          }
        }
      });
      map.addControl(travelFixSelectControl);
      travelFixSelectControl.activate();
      
      // Google.v3 uses EPSG:900913 as projection, so we have to
      // transform our coordinates
      map.setCenter(new OpenLayers.LonLat(-122.26620197296143,37.869467010881124).transform(
          new OpenLayers.Projection("EPSG:4326"),
          map.getProjectionObject()
      ), 10);
      previousMapCenter = map.getCenter();
      
      // DATA
      window.TravelFix = Backbone.Model.extend({
        name: 'travel_fix',
        marker: null
      });
      
      window.TravelFixes = Backbone.Collection.extend({
        name: 'travel_fixes',
        model: TravelFix,
        url: '/api/travel_fixes.json'
      });
      
      window.travelFixes = new TravelFixes;
      
      window.TravelFixItemView = Backbone.View.extend({
        tagName: 'li',
        className: 'travel-fix-item',
        template: _.template('<input type="checkbox" id="travel-fix-<%= travel_fix.id %>" class="checkbox"/> <%= new Date(travel_fix.created_at).strftime("%A, %b %d %Y %I:%M %p") %>'),
        events: {
          "click .checkbox" : "toggle",
          "mouseover"       : "highlightMarker",
          "mouseout"        : "unhighlighMarker"
        },
        render: function() {
          $(this.el).html(this.template(this.model.toJSON()));
          return this;
        },
        toggle: function() {
          if (!this.model.marker) {
            var marker = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(this.model.attributes.longitude,this.model.attributes.latitude).transform(
                new OpenLayers.Projection("EPSG:4326"),
                map.getProjectionObject()
            ), { travelFixId: this.model.id });
            travelFixLayer.addFeatures(marker);
            previousMapCenter = map.getCenter();
            map.panTo(new OpenLayers.LonLat(this.model.attributes.longitude,this.model.attributes.latitude).transform(
                new OpenLayers.Projection("EPSG:4326"),
                map.getProjectionObject()
            ));
            this.model.marker = marker;
            // $(this.el).css('background', '#006DEE');
            $(this.el).addClass('highlighted')
          }
          else {
            travelFixLayer.removeFeatures(this.model.marker);
            this.model.marker = null;
            $(this.el).removeClass('selected', 'highlighted');
          }
        },
        highlightMarker: function() {
          if (this.model.marker) {
            travelFixSelectControl.select(this.model.marker);
            
            previousMapCenter = map.getCenter();
            map.panTo(new OpenLayers.LonLat(this.model.attributes.longitude,this.model.attributes.latitude).transform(
                new OpenLayers.Projection("EPSG:4326"),
                map.getProjectionObject()
            ));
            $(this.el).addClass('highlighted')
          }
        },
        unhighlighMarker: function() {
          if (this.model.marker) {
            travelFixSelectControl.unselect(this.model.marker);
            $(this.el).removeClass('highlighted');
            $(this.el).addClass('selected')
          }
          map.panTo(previousMapCenter);
        }
      });
      
      window.TravelFixListView = Backbone.View.extend({
        id: 'travel-fix-list',
        initialize: function() {
          _.bindAll(this, 'addAll');
          travelFixes.bind('refresh', this.addAll);
          travelFixes.refresh(#{@travel_fixes.to_json.html_safe});
        },
        addOne: function(travelFix) {
          var view = new TravelFixItemView({model: travelFix});
          this.$("#travel-fix-list").append(view.render().el);
        },
        addAll: function() {
          travelFixes.each(this.addOne);
        }
      });
      
      window.travelFixListView = new TravelFixListView;
    });
  
  #container
    #map
  
    #travel-fix-column
      %h1 Travel Fixes
      %ul#travel-fix-list
  
    #trip-column
      %h1 Trips
  
    #activity-column
      %h1 Activities
  
= render :file => 'experimenter/_base'